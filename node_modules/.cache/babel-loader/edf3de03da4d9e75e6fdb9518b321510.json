{"ast":null,"code":"import { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./printDebugValue\";\nimport { createTrackingData, recordReactionAsCommitted, scheduleCleanupOfReactionIfLeaked } from \"./reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useForceUpdate } from \"./utils\";\nimport { useQueuedForceUpdate, useQueuedForceUpdateBlock } from \"./useQueuedForceUpdate\";\nvar EMPTY_OBJECT = {};\n\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\" + baseComponentName;\n}\n\nexport function useObserver(fn, baseComponentName, options) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n\n  if (options === void 0) {\n    options = EMPTY_OBJECT;\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;\n  var forceUpdate = wantedForceUpdateHook();\n  var queuedForceUpdate = useQueuedForceUpdate(forceUpdate); // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n  var reactionTrackingRef = React.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction_1 = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        queuedForceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.  The easiest way to do that is just to\n        // drop our current reaction and allow useEffect() to recreate it.\n        newReaction_1.dispose();\n        reactionTrackingRef.current = null;\n      }\n    });\n    var trackingData_1 = createTrackingData(newReaction_1);\n    reactionTrackingRef.current = trackingData_1;\n    scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true;\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This is either due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up, or we got a observable change\n      // between render and useEffect\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          queuedForceUpdate();\n        }),\n        cleanAt: Infinity\n      };\n      queuedForceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // delay all force-update calls after rendering of this component\n\n  return useQueuedForceUpdateBlock(function () {\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    reaction.track(function () {\n      try {\n        rendering = fn();\n      } catch (e) {\n        exception = e;\n      }\n    });\n\n    if (exception) {\n      throw exception; // re-throw any exceptions caught during rendering\n    }\n\n    return rendering;\n  });\n}","map":{"version":3,"sources":["/Users/awang/Downloads/react/key/keyCode/node_modules/mobx-react-lite/es/useObserver.js"],"names":["Reaction","React","printDebugValue","createTrackingData","recordReactionAsCommitted","scheduleCleanupOfReactionIfLeaked","isUsingStaticRendering","useForceUpdate","useQueuedForceUpdate","useQueuedForceUpdateBlock","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","useObserver","fn","options","wantedForceUpdateHook","forceUpdate","queuedForceUpdate","reactionTrackingRef","useRef","current","newReaction_1","trackingData_1","mounted","dispose","reaction","useDebugValue","useEffect","cleanAt","Infinity","rendering","exception","track","e"],"mappings":"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","sourcesContent":["import { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./printDebugValue\";\nimport { createTrackingData, recordReactionAsCommitted, scheduleCleanupOfReactionIfLeaked } from \"./reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useForceUpdate } from \"./utils\";\nimport { useQueuedForceUpdate, useQueuedForceUpdateBlock } from \"./useQueuedForceUpdate\";\nvar EMPTY_OBJECT = {};\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\" + baseComponentName;\n}\nexport function useObserver(fn, baseComponentName, options) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (options === void 0) { options = EMPTY_OBJECT; }\n    if (isUsingStaticRendering()) {\n        return fn();\n    }\n    var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;\n    var forceUpdate = wantedForceUpdateHook();\n    var queuedForceUpdate = useQueuedForceUpdate(forceUpdate);\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var reactionTrackingRef = React.useRef(null);\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n        var newReaction_1 = new Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData_1.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                queuedForceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction_1.dispose();\n                reactionTrackingRef.current = null;\n            }\n        });\n        var trackingData_1 = createTrackingData(newReaction_1);\n        reactionTrackingRef.current = trackingData_1;\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n    }\n    var reaction = reactionTrackingRef.current.reaction;\n    React.useDebugValue(reaction, printDebugValue);\n    React.useEffect(function () {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef);\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true;\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n                    // We've definitely already been mounted at this point\n                    queuedForceUpdate();\n                }),\n                cleanAt: Infinity\n            };\n            queuedForceUpdate();\n        }\n        return function () {\n            reactionTrackingRef.current.reaction.dispose();\n            reactionTrackingRef.current = null;\n        };\n    }, []);\n    // delay all force-update calls after rendering of this component\n    return useQueuedForceUpdateBlock(function () {\n        // render the original component, but have the\n        // reaction track the observables, so that rendering\n        // can be invalidated (see above) once a dependency changes\n        var rendering;\n        var exception;\n        reaction.track(function () {\n            try {\n                rendering = fn();\n            }\n            catch (e) {\n                exception = e;\n            }\n        });\n        if (exception) {\n            throw exception; // re-throw any exceptions caught during rendering\n        }\n        return rendering;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}